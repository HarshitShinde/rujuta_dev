name: Welcome First-Time Contributor

on:
  pull_request_target:
    types: [opened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  welcome:
    runs-on: ubuntu-latest
    steps:
      - name: Check if user has prior PRs
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const login = context.payload.pull_request.user.login;

            // Fetch prior PRs by this user (excluding the current one)
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "all",
              per_page: 5
            });

            const prior = prs.filter(pr => pr.user.login == login && pr.number != context.issue.number);

            core.setOutput("isFirstTime", prior.length == 0);
      
      - name: Welcome message + sticker
        if: steps.check.outputs.isFirstTime == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const stickers = [
              "![🎉 Sticker](https://media.giphy.com/media/26ufdipQqU2lhNA4g/giphy.gif)",
              "![🚀 Sticker](https://media.giphy.com/media/duzpaTbCUy9Vu/giphy.gif)",
              "![👏 Sticker](https://media.giphy.com/media/l0MYt5jPR6QX5pnqM/giphy.gif)",
              "![🌟 Sticker](https://media.giphy.com/media/3oriO0OEd9QIDdllqo/giphy.gif)",
              "![🔥 Sticker](https://media.giphy.com/media/26AHONQ79FdWZhAI0/giphy.gif)"
            ];

            const randomSticker = stickers[Math.floor(Math.random() * stickers.length)];

            const message = `
            🎉 Thank you @${context.payload.pull_request.user.login} for your **first contribution**! 🎉  

            ${randomSticker}

            We’re thrilled to have you join the project — welcome aboard! 🚀
            `;

            // Post comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

            // Apply label
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["first-time-contributor"]
            });
